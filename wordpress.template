AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template WordPress_Single_Instance: WordPress
  is web software you can use to create a beautiful website or blog. This template
  installs WordPress with a local MySQL database for storage. It demonstrates using
  the AWS CloudFormation bootstrap scripts to deploy WordPress. **WARNING** This template
  creates an Amazon EC2 instance. You will be billed for the AWS resources used if
  you create a stack from this template.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password. Min 8
    Type: String
  DBRootPassword:
    NoEcho: 'true'
    Description: MySQL root password
    Type: String
  VPCCIDRPRD:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.1.0.0/16
    AllowedValues:
      - 10.1.0.0/16
  PublicSubnet1ParamPrd:
    Description: Public Subnet 1 - Prd
    Type: String
    Default: 10.1.11.0/24
    AllowedValues:
      - 10.1.11.0/24
  PublicSubnet2ParamPrd:
    Description: Public Subnet 2 - Prd
    Type: String
    Default: 10.1.12.0/24
    AllowedValues:
      - 10.1.12.0/24
  DRREGION:
    Description: DR Region
    Type: String
    Default: us-east-2
    AllowedValues:
      - us-east-2
  VPCCIDRDR:
    Description: CIDR Block for DR Region VPC
    Type: String
    Default: 10.2.0.0/16
    AllowedValues:
      - 10.2.0.0/16
  PublicSubnet1ParamDr:
    Description: Public Subnet 1 for DR Region
    Type: String
    Default: 10.2.11.0/24
    AllowedValues:
      - 10.2.11.0/24
  PublicSubnet2ParamDr:
    Description: Public Subnet 2 for DR Region
    Type: String
    Default: 10.2.12.0/24
    AllowedValues:
      - 10.2.12.0/24
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-west-2:
      PV64: ami-7f77b31f
      HVM64: ami-7172b611
      HVMG2: ami-83b770e3
Resources:
  WebServerSecurityGroupPrd:
    DependsOn: AttachGatewayPrd
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 locked down to the load balancer
        + SSH access
      VpcId: !Ref 'VPCPrd'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SSHLocation'
  VPCPrd:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDRPRD'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: PRD-Wordpress VPC
  InternetGatewayPrd:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPCPrd
  AttachGatewayPrd:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - VPCPrd
      - InternetGatewayPrd
    Properties:
      VpcId: !Ref 'VPCPrd'
      InternetGatewayId: !Ref 'InternetGatewayPrd'
  PublicSubnet1Prd:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGatewayPrd
    Properties:
      VpcId: !Ref 'VPCPrd'
      CidrBlock: !Ref 'PublicSubnet1ParamPrd'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 1 - Prd
  PublicSubnet2Prd:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGatewayPrd
    Properties:
      VpcId: !Ref 'VPCPrd'
      CidrBlock: !Ref 'PublicSubnet2ParamPrd'
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Public Subnet 2 - Prd
  PublicRouteTablePrd:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - VPCPrd
      - AttachGatewayPrd
    Properties:
      VpcId: !Ref 'VPCPrd'
      Tags:
        - Key: Name
          Value: Public - Prd
  PublicRoutePrd:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTablePrd
      - AttachGatewayPrd
    Properties:
      RouteTableId: !Ref 'PublicRouteTablePrd'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGatewayPrd'
  PublicSubnet1RouteTableAssociationPrd:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTablePrd
      - PublicSubnet1Prd
      - AttachGatewayPrd
    Properties:
      SubnetId: !Ref 'PublicSubnet1Prd'
      RouteTableId: !Ref 'PublicRouteTablePrd'
  PublicSubnet2RouteTableAssociationPrd:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTablePrd
      - PublicSubnet2Prd
    Properties:
      SubnetId: !Ref 'PublicSubnet2Prd'
      RouteTableId: !Ref 'PublicRouteTablePrd'
  UpdateParameter:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: prdwebinstanceid
      Value: !Ref WebServer
      Type: String
  UpdateVPCCIDRDR:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: VPCCIDRDR
      Value: !Ref VPCCIDRDR
      Type: String
  UpdatePublicSubnet1Dr:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: PublicSubnet1Dr
      Value: !Ref PublicSubnet1ParamDr
      Type: String
  UpdatePublicSubnet2Dr:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: PublicSubnet2Dr
      Value: !Ref PublicSubnet2ParamDr
      Type: String
  UpdateVPCCIDRPR:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: VPCCIDRPR
      Value: !Ref 'VPCPrd'
      Type: String
  UpdatePublicSubnet1Pr:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: PublicSubnet1Pr
      Value: !Ref 'PublicSubnet1Prd'
      Type: String
  UpdatePublicSubnet2Pr:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: PublicSubnet2Pr
      Value: !Ref 'PublicSubnet2Prd'
      Type: String
  UpdateWebServerSecurityGroupPr:
    Type: AWS::SSM::Parameter
    DependsOn: WebServer
    Properties:
      Name: WebServerSecurityGroupPr
      Value: !Ref 'WebServerSecurityGroupPrd'
      Type: String
  WebServer:
    Type: AWS::EC2::Instance
    DependsOn: WebServerSecurityGroupPrd
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
            - configure_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v          --stack ${AWS::StackName}         --resource WebServer          --configsets wordpress_install          --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php: []
              php-mysql: []
              mysql: []
              mysql-server: []
              mysql-devel: []
              mysql-libs: []
              httpd: []
          sources:
            /var/www/html: http://wordpress.org/latest.tar.gz
          files:
            /tmp/setup.mysql:
              content: !Sub |
                CREATE DATABASE ${DBName};
                CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';
                GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost';
                FLUSH PRIVILEGES;
              mode: '000400'
              owner: root
              group: root
            /tmp/create-wp-config:
              content: !Sub |
                #!/bin/bash -xe
                cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                sed -i "s/'database_name_here'/'${DBName}'/g" wp-config.php
                sed -i "s/'username_here'/'${DBUser}'/g" wp-config.php
                sed -i "s/'password_here'/'${DBPassword}'/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              mysqld:
                enabled: 'true'
                ensureRunning: 'true'
        configure_wordpress:
          commands:
            01_set_mysql_root_password:
              command: !Sub 'mysqladmin -u root password ''${DBRootPassword}'''
              test: !Sub '$(mysql ${DBName} -u root --password=''${DBRootPassword}''
                >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            02_create_database:
              command: !Sub 'mysql -u root --password=''${DBRootPassword}'' < /tmp/setup.mysql'
              test: !Sub '$(mysql ${DBName} -u root --password=''${DBRootPassword}''
                >/dev/null 2>&1 </dev/null); (( $? != 0 ))'
            03_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress

    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref 'InstanceType'
          - Arch
      InstanceType: !Ref 'InstanceType'
      NetworkInterfaces:
        - DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          SubnetId: !Ref 'PublicSubnet2Prd'
          GroupSet:
            - !Ref 'WebServerSecurityGroupPrd'
      KeyName: !Ref 'KeyName'
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets wordpress_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
          service httpd stop
          yum remove php* -y
          yum remove httpd* -y
          yum clean all
          yum upgrade -y
          yum install httpd24 -y
          yum install php70 php70-mysqlnd php70-imap php70-pecl-memcache php70-pecl-apcu php70-gd -y
          yum install mod24_ssl -y
          service httpd start

    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
Outputs:
  WebsiteURL:
    Value: !Sub 'http://${WebServer.PublicDnsName}/wordpress'
    Description: WordPress Website Prod Link
  EC2IPAddress:
    Value: !GetAtt WebServer.PublicIp
  WebServer:
    Value: !Ref WebServer
  VPCCIDRDR:
    Value: !Ref VPCCIDRDR
  PublicSubnet1ParamDr:
    Value: !Ref PublicSubnet1ParamDr
  PublicSubnet2ParamDr:
    Value: !Ref PublicSubnet2ParamDr
